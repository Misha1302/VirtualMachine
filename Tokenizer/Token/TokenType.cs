namespace Tokenizer.Token;

[Flags]
public enum TokenType : ulong
{
    OpenParentheses = 0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0001, // (
    CloseParentheses = 0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0010, // )
    OpenBracket = 0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0100, // [
    CloseBracket = 0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_1000, // ]
    End = 0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0001_0000, // end
    Loop = 0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0010_0000, // loop (for)
    Number = 0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0100_0000, // 0
    Variable = 0b0000_0000_0000_0000_0000_0000_0000_0000_0000_1000_0000, // i
    Modulo = 0b0000_0000_0000_0000_0000_0000_0000_0000_0001_0000_0000, // XXX
    String = 0b0000_0000_0000_0000_0000_0000_0000_0000_0010_0000_0000, // 'S t r'
    Plus = 0b0000_0000_0000_0000_0000_0000_0000_0000_0100_0000_0000, // +
    Minus = 0b0000_0000_0000_0000_0000_0000_0000_0000_1000_0000_0000, // -
    Multiply = 0b0000_0000_0000_0000_0000_0000_0000_0001_0000_0000_0000, // *
    Divide = 0b0000_0000_0000_0000_0000_0000_0000_0010_0000_0000_0000, // /
    ForeignMethod = 0b0000_0000_0000_0000_0000_0000_0000_0100_0000_0000_0000, // Print
    Eof = 0b0000_0000_0000_0000_0000_0000_0000_1000_0000_0000_0000, // \0
    Unknown = 0b0000_0000_0000_0000_0000_0000_0001_0000_0000_0000_0000, // X
    NewLine = 0b0000_0000_0000_0000_0000_0000_0010_0000_0000_0000_0000, // \r\n
    Comma = 0b0000_0000_0000_0000_0000_0000_0100_0000_0000_0000_0000, // ,
    Dot = 0b0000_0000_0000_0000_0000_0000_1000_0000_0000_0000_0000, // .
    WhiteSpace = 0b0000_0000_0000_0000_0000_0001_0000_0000_0000_0000_0000, // ' '
    EqualsSign = 0b0000_0000_0000_0000_0000_0010_0000_0000_0000_0000_0000, // =
    Comment = 0b0000_0000_0000_0000_0000_0100_0000_0000_0000_0000_0000, // # XXX
    Import = 0b0000_0000_0000_0000_0000_1000_0000_0000_0000_0000_0000, // import 'X' 'X'
    Var = 0b0000_0000_0000_0000_0001_0000_0000_0000_0000_0000_0000, // VAR x
    NewVariable = 0b0000_0000_0000_0000_0010_0000_0000_0000_0000_0000_0000, // var X
    LessThan = 0b0000_0000_0000_0000_0100_0000_0000_0000_0000_0000_0000, // <
    GreatThan = 0b0000_0000_0000_0000_1000_0000_0000_0000_0000_0000_0000, // >
    IsEquals = 0b0000_0000_0000_0001_0000_0000_0000_0000_0000_0000_0000, // ==
    If = 0b0000_0000_0000_0010_0000_0000_0000_0000_0000_0000_0000, // if
    Else = 0b0000_0000_0000_0100_0000_0000_0000_0000_0000_0000_0000, // else
    Ptr = 0b0000_0000_0000_1000_0000_0000_0000_0000_0000_0000_0000, // PTR variable
    PtrEqualsSign = 0b0000_0000_0001_0000_0000_0000_0000_0000_0000_0000_0000, // x -> y
    PushByPtr = 0b0000_0000_0010_0000_0000_0000_0000_0000_0000_0000_0000, // REF x
    ElemOf = 0b0000_0000_0100_0000_0000_0000_0000_0000_0000_0000_0000, // elemOf
    SetElem = 0b0000_0000_1000_0000_0000_0000_0000_0000_0000_0000_0000, // setElem
    IsNotEquals = 0b0000_0001_0000_0000_0000_0000_0000_0000_0000_0000_0000, // !=
    IsNot = 0b0000_0010_0000_0000_0000_0000_0000_0000_0000_0000_0000, // !
    In = 0b0000_0100_0000_0000_0000_0000_0000_0000_0000_0000_0000, // in
    To = 0b0000_1000_0000_0000_0000_0000_0000_0000_0000_0000_0000, // to
    And = 0b0001_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000, // and
    Or = 0b0010_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000 // or
}